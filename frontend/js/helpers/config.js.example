// Please do not change these constants. They should set by the install script
API_URL = "__API_URL__"
METRICS_URL = "__METRICS_URL__"

/*
    The following are configurations to customize de Detailed Metrics / Compare view according to your needs.
    The components are fixed, but you can rename then and include different metrics if needed
*/

// title and filter function for the top left most chart in the Detailed Metrics / Compare view
const TOTAL_CHART_BOTTOM_TITLE = 'Total energy consumption';
const TOTAL_CHART_BOTTOM_LABEL = 'Machine Energy';
const TOTAL_CHART_UNIT = 'mJ';
// function must return boolean
const total_chart_bottom_condition = (metric) => {
    if(metric.match(/^.*_energy.*_machine$/) !== null) return true;
    return false;
}

// title and filter function for the top left most chart in the Detailed Metrics / Compare view
const TOP_BAR_CHART_TITLE = 'Energy metrics'
const TOP_BAR_CHART_UNIT = 'mJ'
const top_bar_chart_condition = (metric) => {
    if(metric.indexOf('_energy_') !== -1) return true;
    return false;
}

// title and filter function for the top right radar chart in the Detailed Metrics / Compare view
const RADAR_CHART_TITLE = 'General component distribution'
const radar_chart_condition = (metric) => {
    if(metric.indexOf('cpu_frequency_sysfs_core') == -1) return true;
    return false;
}

// filter function for the CO2 calculations in the Detailed Metrics
// please note that this metric must be unique per phase
const phase_time_metric_condition = (metric) => {
    if(metric == 'phase_time_syscall_system') return true;
    return false;
}

const machine_co2_metric_condition = (metric) => {
    if(metric.match(/^.*_co2_.*_machine$/) !== null) return true;
    return false;
}

const network_co2_metric_condition = (metric) => {
    if(metric == 'network_co2_formula_global') return true;
    return false;
}

const network_energy_metric_condition = (metric) => {
    if(metric == 'network_energy_formula_global') return true;
    return false;
}

const machine_power_metric_condition = (metric) => {
    if(metric.match(/^.*_power_.*_machine$/) !== null) return true;
    return false;
}

const machine_energy_metric_condition = (metric) => {
    if(metric.match(/^.*_energy_.*_machine$/) !== null) return true;
    return false;
}

const sci_metric_condition = (metric) => {
    if(metric == 'software_carbon_intensity_global') return true;
    return false;
}

const embodied_carbon_share_metric_condition = (metric) => {
    if(metric == 'embodied_carbon_share_machine') return true;
    return false;
}

