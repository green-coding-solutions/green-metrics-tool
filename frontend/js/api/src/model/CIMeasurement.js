/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CarbonIntensityG from './CarbonIntensityG';
import CarbonUg from './CarbonUg';
import City from './City';
import FilterMachine from './FilterMachine';
import FilterProject from './FilterProject';
import FilterTags from './FilterTags';
import FilterType from './FilterType';
import Ip from './Ip';
import Lat from './Lat';
import Lon from './Lon';
import Note from './Note';

/**
 * The CIMeasurement model module.
 * @module model/CIMeasurement
 * @version 0.1.0
 */
class CIMeasurement {
    /**
     * Constructs a new <code>CIMeasurement</code>.
     * @alias module:model/CIMeasurement
     * @extends Object
     * @param energyUj {Number} 
     * @param repo {String} 
     * @param branch {String} 
     * @param cpu {String} 
     * @param cpuUtilAvg {Number} 
     * @param commitHash {String} 
     * @param workflow {String} 
     * @param runId {String} 
     * @param source {String} 
     * @param label {String} 
     * @param durationUs {Number} 
     */
    constructor(energyUj, repo, branch, cpu, cpuUtilAvg, commitHash, workflow, runId, source, label, durationUs) { 
        
        CIMeasurement.initialize(this, energyUj, repo, branch, cpu, cpuUtilAvg, commitHash, workflow, runId, source, label, durationUs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, energyUj, repo, branch, cpu, cpuUtilAvg, commitHash, workflow, runId, source, label, durationUs) { 
        obj['energy_uj'] = energyUj;
        obj['repo'] = repo;
        obj['branch'] = branch;
        obj['cpu'] = cpu;
        obj['cpu_util_avg'] = cpuUtilAvg;
        obj['commit_hash'] = commitHash;
        obj['workflow'] = workflow;
        obj['run_id'] = runId;
        obj['source'] = source;
        obj['label'] = label;
        obj['duration_us'] = durationUs;
    }

    /**
     * Constructs a <code>CIMeasurement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CIMeasurement} obj Optional instance to populate.
     * @return {module:model/CIMeasurement} The populated <code>CIMeasurement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CIMeasurement();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('energy_uj')) {
                obj['energy_uj'] = ApiClient.convertToType(data['energy_uj'], 'Number');
            }
            if (data.hasOwnProperty('repo')) {
                obj['repo'] = ApiClient.convertToType(data['repo'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('cpu')) {
                obj['cpu'] = ApiClient.convertToType(data['cpu'], 'String');
            }
            if (data.hasOwnProperty('cpu_util_avg')) {
                obj['cpu_util_avg'] = ApiClient.convertToType(data['cpu_util_avg'], 'Number');
            }
            if (data.hasOwnProperty('commit_hash')) {
                obj['commit_hash'] = ApiClient.convertToType(data['commit_hash'], 'String');
            }
            if (data.hasOwnProperty('workflow')) {
                obj['workflow'] = ApiClient.convertToType(data['workflow'], 'String');
            }
            if (data.hasOwnProperty('run_id')) {
                obj['run_id'] = ApiClient.convertToType(data['run_id'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('duration_us')) {
                obj['duration_us'] = ApiClient.convertToType(data['duration_us'], 'Number');
            }
            if (data.hasOwnProperty('workflow_name')) {
                obj['workflow_name'] = ApiClient.convertToType(data['workflow_name'], 'String');
            }
            if (data.hasOwnProperty('filter_type')) {
                obj['filter_type'] = FilterType.constructFromObject(data['filter_type']);
            }
            if (data.hasOwnProperty('filter_project')) {
                obj['filter_project'] = FilterProject.constructFromObject(data['filter_project']);
            }
            if (data.hasOwnProperty('filter_machine')) {
                obj['filter_machine'] = FilterMachine.constructFromObject(data['filter_machine']);
            }
            if (data.hasOwnProperty('filter_tags')) {
                obj['filter_tags'] = FilterTags.constructFromObject(data['filter_tags']);
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = Lat.constructFromObject(data['lat']);
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = Lon.constructFromObject(data['lon']);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = City.constructFromObject(data['city']);
            }
            if (data.hasOwnProperty('carbon_intensity_g')) {
                obj['carbon_intensity_g'] = CarbonIntensityG.constructFromObject(data['carbon_intensity_g']);
            }
            if (data.hasOwnProperty('carbon_ug')) {
                obj['carbon_ug'] = CarbonUg.constructFromObject(data['carbon_ug']);
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = Ip.constructFromObject(data['ip']);
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = Note.constructFromObject(data['note']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CIMeasurement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CIMeasurement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CIMeasurement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['repo'] && !(typeof data['repo'] === 'string' || data['repo'] instanceof String)) {
            throw new Error("Expected the field `repo` to be a primitive type in the JSON string but got " + data['repo']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['cpu'] && !(typeof data['cpu'] === 'string' || data['cpu'] instanceof String)) {
            throw new Error("Expected the field `cpu` to be a primitive type in the JSON string but got " + data['cpu']);
        }
        // ensure the json data is a string
        if (data['commit_hash'] && !(typeof data['commit_hash'] === 'string' || data['commit_hash'] instanceof String)) {
            throw new Error("Expected the field `commit_hash` to be a primitive type in the JSON string but got " + data['commit_hash']);
        }
        // ensure the json data is a string
        if (data['workflow'] && !(typeof data['workflow'] === 'string' || data['workflow'] instanceof String)) {
            throw new Error("Expected the field `workflow` to be a primitive type in the JSON string but got " + data['workflow']);
        }
        // ensure the json data is a string
        if (data['run_id'] && !(typeof data['run_id'] === 'string' || data['run_id'] instanceof String)) {
            throw new Error("Expected the field `run_id` to be a primitive type in the JSON string but got " + data['run_id']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['workflow_name'] && !(typeof data['workflow_name'] === 'string' || data['workflow_name'] instanceof String)) {
            throw new Error("Expected the field `workflow_name` to be a primitive type in the JSON string but got " + data['workflow_name']);
        }
        // validate the optional field `filter_type`
        if (data['filter_type']) { // data not null
          FilterType.validateJSON(data['filter_type']);
        }
        // validate the optional field `filter_project`
        if (data['filter_project']) { // data not null
          FilterProject.validateJSON(data['filter_project']);
        }
        // validate the optional field `filter_machine`
        if (data['filter_machine']) { // data not null
          FilterMachine.validateJSON(data['filter_machine']);
        }
        // validate the optional field `filter_tags`
        if (data['filter_tags']) { // data not null
          FilterTags.validateJSON(data['filter_tags']);
        }
        // validate the optional field `lat`
        if (data['lat']) { // data not null
          Lat.validateJSON(data['lat']);
        }
        // validate the optional field `lon`
        if (data['lon']) { // data not null
          Lon.validateJSON(data['lon']);
        }
        // validate the optional field `city`
        if (data['city']) { // data not null
          City.validateJSON(data['city']);
        }
        // validate the optional field `carbon_intensity_g`
        if (data['carbon_intensity_g']) { // data not null
          CarbonIntensityG.validateJSON(data['carbon_intensity_g']);
        }
        // validate the optional field `carbon_ug`
        if (data['carbon_ug']) { // data not null
          CarbonUg.validateJSON(data['carbon_ug']);
        }
        // validate the optional field `ip`
        if (data['ip']) { // data not null
          Ip.validateJSON(data['ip']);
        }
        // validate the optional field `note`
        if (data['note']) { // data not null
          Note.validateJSON(data['note']);
        }

        return true;
    }


}

CIMeasurement.RequiredProperties = ["energy_uj", "repo", "branch", "cpu", "cpu_util_avg", "commit_hash", "workflow", "run_id", "source", "label", "duration_us"];

/**
 * @member {Number} energy_uj
 */
CIMeasurement.prototype['energy_uj'] = undefined;

/**
 * @member {String} repo
 */
CIMeasurement.prototype['repo'] = undefined;

/**
 * @member {String} branch
 */
CIMeasurement.prototype['branch'] = undefined;

/**
 * @member {String} cpu
 */
CIMeasurement.prototype['cpu'] = undefined;

/**
 * @member {Number} cpu_util_avg
 */
CIMeasurement.prototype['cpu_util_avg'] = undefined;

/**
 * @member {String} commit_hash
 */
CIMeasurement.prototype['commit_hash'] = undefined;

/**
 * @member {String} workflow
 */
CIMeasurement.prototype['workflow'] = undefined;

/**
 * @member {String} run_id
 */
CIMeasurement.prototype['run_id'] = undefined;

/**
 * @member {String} source
 */
CIMeasurement.prototype['source'] = undefined;

/**
 * @member {String} label
 */
CIMeasurement.prototype['label'] = undefined;

/**
 * @member {Number} duration_us
 */
CIMeasurement.prototype['duration_us'] = undefined;

/**
 * @member {String} workflow_name
 */
CIMeasurement.prototype['workflow_name'] = undefined;

/**
 * @member {module:model/FilterType} filter_type
 */
CIMeasurement.prototype['filter_type'] = undefined;

/**
 * @member {module:model/FilterProject} filter_project
 */
CIMeasurement.prototype['filter_project'] = undefined;

/**
 * @member {module:model/FilterMachine} filter_machine
 */
CIMeasurement.prototype['filter_machine'] = undefined;

/**
 * @member {module:model/FilterTags} filter_tags
 */
CIMeasurement.prototype['filter_tags'] = undefined;

/**
 * @member {module:model/Lat} lat
 */
CIMeasurement.prototype['lat'] = undefined;

/**
 * @member {module:model/Lon} lon
 */
CIMeasurement.prototype['lon'] = undefined;

/**
 * @member {module:model/City} city
 */
CIMeasurement.prototype['city'] = undefined;

/**
 * @member {module:model/CarbonIntensityG} carbon_intensity_g
 */
CIMeasurement.prototype['carbon_intensity_g'] = undefined;

/**
 * @member {module:model/CarbonUg} carbon_ug
 */
CIMeasurement.prototype['carbon_ug'] = undefined;

/**
 * @member {module:model/Ip} ip
 */
CIMeasurement.prototype['ip'] = undefined;

/**
 * @member {module:model/Note} note
 */
CIMeasurement.prototype['note'] = undefined;






export default CIMeasurement;

