/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CbCompanyUuid from './CbCompanyUuid';
import CbMachineUuid from './CbMachineUuid';
import CbProjectUuid from './CbProjectUuid';
import City from './City';
import Co2Eq from './Co2Eq';
import Co2I from './Co2I';
import Lat from './Lat';
import Lon from './Lon';
import ProjectId from './ProjectId';

/**
 * The CIMeasurementOld model module.
 * @module model/CIMeasurementOld
 * @version 0.1.0
 */
class CIMeasurementOld {
    /**
     * Constructs a new <code>CIMeasurementOld</code>.
     * @alias module:model/CIMeasurementOld
     * @extends Object
     * @param energyValue {Number} 
     * @param energyUnit {String} 
     * @param repo {String} 
     * @param branch {String} 
     * @param cpu {String} 
     * @param cpuUtilAvg {Number} 
     * @param commitHash {String} 
     * @param workflow {String} 
     * @param runId {String} 
     * @param source {String} 
     * @param label {String} 
     * @param duration {Number} 
     */
    constructor(energyValue, energyUnit, repo, branch, cpu, cpuUtilAvg, commitHash, workflow, runId, source, label, duration) { 
        
        CIMeasurementOld.initialize(this, energyValue, energyUnit, repo, branch, cpu, cpuUtilAvg, commitHash, workflow, runId, source, label, duration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, energyValue, energyUnit, repo, branch, cpu, cpuUtilAvg, commitHash, workflow, runId, source, label, duration) { 
        obj['energy_value'] = energyValue;
        obj['energy_unit'] = energyUnit;
        obj['repo'] = repo;
        obj['branch'] = branch;
        obj['cpu'] = cpu;
        obj['cpu_util_avg'] = cpuUtilAvg;
        obj['commit_hash'] = commitHash;
        obj['workflow'] = workflow;
        obj['run_id'] = runId;
        obj['source'] = source;
        obj['label'] = label;
        obj['duration'] = duration;
    }

    /**
     * Constructs a <code>CIMeasurementOld</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CIMeasurementOld} obj Optional instance to populate.
     * @return {module:model/CIMeasurementOld} The populated <code>CIMeasurementOld</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CIMeasurementOld();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('energy_value')) {
                obj['energy_value'] = ApiClient.convertToType(data['energy_value'], 'Number');
            }
            if (data.hasOwnProperty('energy_unit')) {
                obj['energy_unit'] = ApiClient.convertToType(data['energy_unit'], 'String');
            }
            if (data.hasOwnProperty('repo')) {
                obj['repo'] = ApiClient.convertToType(data['repo'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('cpu')) {
                obj['cpu'] = ApiClient.convertToType(data['cpu'], 'String');
            }
            if (data.hasOwnProperty('cpu_util_avg')) {
                obj['cpu_util_avg'] = ApiClient.convertToType(data['cpu_util_avg'], 'Number');
            }
            if (data.hasOwnProperty('commit_hash')) {
                obj['commit_hash'] = ApiClient.convertToType(data['commit_hash'], 'String');
            }
            if (data.hasOwnProperty('workflow')) {
                obj['workflow'] = ApiClient.convertToType(data['workflow'], 'String');
            }
            if (data.hasOwnProperty('run_id')) {
                obj['run_id'] = ApiClient.convertToType(data['run_id'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('workflow_name')) {
                obj['workflow_name'] = ApiClient.convertToType(data['workflow_name'], 'String');
            }
            if (data.hasOwnProperty('cb_company_uuid')) {
                obj['cb_company_uuid'] = CbCompanyUuid.constructFromObject(data['cb_company_uuid']);
            }
            if (data.hasOwnProperty('cb_project_uuid')) {
                obj['cb_project_uuid'] = CbProjectUuid.constructFromObject(data['cb_project_uuid']);
            }
            if (data.hasOwnProperty('cb_machine_uuid')) {
                obj['cb_machine_uuid'] = CbMachineUuid.constructFromObject(data['cb_machine_uuid']);
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = Lat.constructFromObject(data['lat']);
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = Lon.constructFromObject(data['lon']);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = City.constructFromObject(data['city']);
            }
            if (data.hasOwnProperty('co2i')) {
                obj['co2i'] = Co2I.constructFromObject(data['co2i']);
            }
            if (data.hasOwnProperty('co2eq')) {
                obj['co2eq'] = Co2Eq.constructFromObject(data['co2eq']);
            }
            if (data.hasOwnProperty('project_id')) {
                obj['project_id'] = ProjectId.constructFromObject(data['project_id']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CIMeasurementOld</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CIMeasurementOld</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CIMeasurementOld.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['energy_unit'] && !(typeof data['energy_unit'] === 'string' || data['energy_unit'] instanceof String)) {
            throw new Error("Expected the field `energy_unit` to be a primitive type in the JSON string but got " + data['energy_unit']);
        }
        // ensure the json data is a string
        if (data['repo'] && !(typeof data['repo'] === 'string' || data['repo'] instanceof String)) {
            throw new Error("Expected the field `repo` to be a primitive type in the JSON string but got " + data['repo']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['cpu'] && !(typeof data['cpu'] === 'string' || data['cpu'] instanceof String)) {
            throw new Error("Expected the field `cpu` to be a primitive type in the JSON string but got " + data['cpu']);
        }
        // ensure the json data is a string
        if (data['commit_hash'] && !(typeof data['commit_hash'] === 'string' || data['commit_hash'] instanceof String)) {
            throw new Error("Expected the field `commit_hash` to be a primitive type in the JSON string but got " + data['commit_hash']);
        }
        // ensure the json data is a string
        if (data['workflow'] && !(typeof data['workflow'] === 'string' || data['workflow'] instanceof String)) {
            throw new Error("Expected the field `workflow` to be a primitive type in the JSON string but got " + data['workflow']);
        }
        // ensure the json data is a string
        if (data['run_id'] && !(typeof data['run_id'] === 'string' || data['run_id'] instanceof String)) {
            throw new Error("Expected the field `run_id` to be a primitive type in the JSON string but got " + data['run_id']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['workflow_name'] && !(typeof data['workflow_name'] === 'string' || data['workflow_name'] instanceof String)) {
            throw new Error("Expected the field `workflow_name` to be a primitive type in the JSON string but got " + data['workflow_name']);
        }
        // validate the optional field `cb_company_uuid`
        if (data['cb_company_uuid']) { // data not null
          CbCompanyUuid.validateJSON(data['cb_company_uuid']);
        }
        // validate the optional field `cb_project_uuid`
        if (data['cb_project_uuid']) { // data not null
          CbProjectUuid.validateJSON(data['cb_project_uuid']);
        }
        // validate the optional field `cb_machine_uuid`
        if (data['cb_machine_uuid']) { // data not null
          CbMachineUuid.validateJSON(data['cb_machine_uuid']);
        }
        // validate the optional field `lat`
        if (data['lat']) { // data not null
          Lat.validateJSON(data['lat']);
        }
        // validate the optional field `lon`
        if (data['lon']) { // data not null
          Lon.validateJSON(data['lon']);
        }
        // validate the optional field `city`
        if (data['city']) { // data not null
          City.validateJSON(data['city']);
        }
        // validate the optional field `co2i`
        if (data['co2i']) { // data not null
          Co2I.validateJSON(data['co2i']);
        }
        // validate the optional field `co2eq`
        if (data['co2eq']) { // data not null
          Co2Eq.validateJSON(data['co2eq']);
        }
        // validate the optional field `project_id`
        if (data['project_id']) { // data not null
          ProjectId.validateJSON(data['project_id']);
        }

        return true;
    }


}

CIMeasurementOld.RequiredProperties = ["energy_value", "energy_unit", "repo", "branch", "cpu", "cpu_util_avg", "commit_hash", "workflow", "run_id", "source", "label", "duration"];

/**
 * @member {Number} energy_value
 */
CIMeasurementOld.prototype['energy_value'] = undefined;

/**
 * @member {String} energy_unit
 */
CIMeasurementOld.prototype['energy_unit'] = undefined;

/**
 * @member {String} repo
 */
CIMeasurementOld.prototype['repo'] = undefined;

/**
 * @member {String} branch
 */
CIMeasurementOld.prototype['branch'] = undefined;

/**
 * @member {String} cpu
 */
CIMeasurementOld.prototype['cpu'] = undefined;

/**
 * @member {Number} cpu_util_avg
 */
CIMeasurementOld.prototype['cpu_util_avg'] = undefined;

/**
 * @member {String} commit_hash
 */
CIMeasurementOld.prototype['commit_hash'] = undefined;

/**
 * @member {String} workflow
 */
CIMeasurementOld.prototype['workflow'] = undefined;

/**
 * @member {String} run_id
 */
CIMeasurementOld.prototype['run_id'] = undefined;

/**
 * @member {String} source
 */
CIMeasurementOld.prototype['source'] = undefined;

/**
 * @member {String} label
 */
CIMeasurementOld.prototype['label'] = undefined;

/**
 * @member {Number} duration
 */
CIMeasurementOld.prototype['duration'] = undefined;

/**
 * @member {String} workflow_name
 */
CIMeasurementOld.prototype['workflow_name'] = undefined;

/**
 * @member {module:model/CbCompanyUuid} cb_company_uuid
 */
CIMeasurementOld.prototype['cb_company_uuid'] = undefined;

/**
 * @member {module:model/CbProjectUuid} cb_project_uuid
 */
CIMeasurementOld.prototype['cb_project_uuid'] = undefined;

/**
 * @member {module:model/CbMachineUuid} cb_machine_uuid
 */
CIMeasurementOld.prototype['cb_machine_uuid'] = undefined;

/**
 * @member {module:model/Lat} lat
 */
CIMeasurementOld.prototype['lat'] = undefined;

/**
 * @member {module:model/Lon} lon
 */
CIMeasurementOld.prototype['lon'] = undefined;

/**
 * @member {module:model/City} city
 */
CIMeasurementOld.prototype['city'] = undefined;

/**
 * @member {module:model/Co2I} co2i
 */
CIMeasurementOld.prototype['co2i'] = undefined;

/**
 * @member {module:model/Co2Eq} co2eq
 */
CIMeasurementOld.prototype['co2eq'] = undefined;

/**
 * @member {module:model/ProjectId} project_id
 */
CIMeasurementOld.prototype['project_id'] = undefined;






export default CIMeasurementOld;

