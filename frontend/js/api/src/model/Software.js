/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Email from './Email';
import ImageUrl from './ImageUrl';
import UsageScenarioVariables from './UsageScenarioVariables';

/**
 * The Software model module.
 * @module model/Software
 * @version 0.1.0
 */
class Software {
    /**
     * Constructs a new <code>Software</code>.
     * @alias module:model/Software
     * @extends Object
     * @param name {String} 
     * @param repoUrl {String} 
     * @param filename {String} 
     * @param branch {String} 
     * @param machineId {Number} 
     * @param scheduleMode {String} 
     */
    constructor(name, repoUrl, filename, branch, machineId, scheduleMode) { 
        
        Software.initialize(this, name, repoUrl, filename, branch, machineId, scheduleMode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, repoUrl, filename, branch, machineId, scheduleMode) { 
        obj['name'] = name;
        obj['repo_url'] = repoUrl;
        obj['filename'] = filename;
        obj['branch'] = branch;
        obj['machine_id'] = machineId;
        obj['schedule_mode'] = scheduleMode;
    }

    /**
     * Constructs a <code>Software</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Software} obj Optional instance to populate.
     * @return {module:model/Software} The populated <code>Software</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Software();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ImageUrl.constructFromObject(data['image_url']);
            }
            if (data.hasOwnProperty('repo_url')) {
                obj['repo_url'] = ApiClient.convertToType(data['repo_url'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = Email.constructFromObject(data['email']);
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('machine_id')) {
                obj['machine_id'] = ApiClient.convertToType(data['machine_id'], 'Number');
            }
            if (data.hasOwnProperty('schedule_mode')) {
                obj['schedule_mode'] = ApiClient.convertToType(data['schedule_mode'], 'String');
            }
            if (data.hasOwnProperty('usage_scenario_variables')) {
                obj['usage_scenario_variables'] = UsageScenarioVariables.constructFromObject(data['usage_scenario_variables']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Software</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Software</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Software.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `image_url`
        if (data['image_url']) { // data not null
          ImageUrl.validateJSON(data['image_url']);
        }
        // ensure the json data is a string
        if (data['repo_url'] && !(typeof data['repo_url'] === 'string' || data['repo_url'] instanceof String)) {
            throw new Error("Expected the field `repo_url` to be a primitive type in the JSON string but got " + data['repo_url']);
        }
        // validate the optional field `email`
        if (data['email']) { // data not null
          Email.validateJSON(data['email']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['schedule_mode'] && !(typeof data['schedule_mode'] === 'string' || data['schedule_mode'] instanceof String)) {
            throw new Error("Expected the field `schedule_mode` to be a primitive type in the JSON string but got " + data['schedule_mode']);
        }
        // validate the optional field `usage_scenario_variables`
        if (data['usage_scenario_variables']) { // data not null
          UsageScenarioVariables.validateJSON(data['usage_scenario_variables']);
        }

        return true;
    }


}

Software.RequiredProperties = ["name", "repo_url", "filename", "branch", "machine_id", "schedule_mode"];

/**
 * @member {String} name
 */
Software.prototype['name'] = undefined;

/**
 * @member {module:model/ImageUrl} image_url
 */
Software.prototype['image_url'] = undefined;

/**
 * @member {String} repo_url
 */
Software.prototype['repo_url'] = undefined;

/**
 * @member {module:model/Email} email
 */
Software.prototype['email'] = undefined;

/**
 * @member {String} filename
 */
Software.prototype['filename'] = undefined;

/**
 * @member {String} branch
 */
Software.prototype['branch'] = undefined;

/**
 * @member {Number} machine_id
 */
Software.prototype['machine_id'] = undefined;

/**
 * @member {String} schedule_mode
 */
Software.prototype['schedule_mode'] = undefined;

/**
 * @member {module:model/UsageScenarioVariables} usage_scenario_variables
 */
Software.prototype['usage_scenario_variables'] = undefined;






export default Software;

