/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CIMeasurement from '../model/CIMeasurement';
import CIMeasurementOld from '../model/CIMeasurementOld';
import HTTPValidationError from '../model/HTTPValidationError';
import JobChange from '../model/JobChange';
import Software from '../model/Software';
import UserSetting from '../model/UserSetting';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Compare In Repo
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {String} [forceMode] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    compareInRepoWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling compareInRepo");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids,
        'force_mode': opts['forceMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/compare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Compare In Repo
     * @param {String} ids 
     * @param {Object} opts Optional parameters
     * @param {String} opts.forceMode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    compareInRepo(ids, opts) {
      return this.compareInRepoWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Diff
     * @param {String} ids 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    diffWithHttpInfo(ids) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling diff");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/diff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Diff
     * @param {String} ids 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    diff(ids) {
      return this.diffWithHttpInfo(ids)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Badge Single
     * @param {String} runId 
     * @param {Object} opts Optional parameters
     * @param {String} [metric = 'cpu_energy_rapl_msr_component')] 
     * @param {String} [unit = 'watt-hours')] 
     * @param {String} [phase] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getBadgeSingleWithHttpInfo(runId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getBadgeSingle");
      }

      let pathParams = {
        'run_id': runId
      };
      let queryParams = {
        'metric': opts['metric'],
        'unit': opts['unit'],
        'phase': opts['phase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/badge/single/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Badge Single
     * @param {String} runId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.metric  (default to 'cpu_energy_rapl_msr_component')
     * @param {String} opts.unit  (default to 'watt-hours')
     * @param {String} opts.phase 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getBadgeSingle(runId, opts) {
      return this.getBadgeSingleWithHttpInfo(runId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Ci Badge Get
     * @param {String} repo 
     * @param {String} branch 
     * @param {String} workflow 
     * @param {Object} opts Optional parameters
     * @param {String} [mode = 'last')] 
     * @param {String} [metric = 'energy')] 
     * @param {Number} [durationDays] 
     * @param {String} [unit = 'watt-hours')] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getCiBadgeGetWithHttpInfo(repo, branch, workflow, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getCiBadgeGet");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling getCiBadgeGet");
      }
      // verify the required parameter 'workflow' is set
      if (workflow === undefined || workflow === null) {
        throw new Error("Missing the required parameter 'workflow' when calling getCiBadgeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'branch': branch,
        'workflow': workflow,
        'mode': opts['mode'],
        'metric': opts['metric'],
        'duration_days': opts['durationDays'],
        'unit': opts['unit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/ci/badge/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Ci Badge Get
     * @param {String} repo 
     * @param {String} branch 
     * @param {String} workflow 
     * @param {Object} opts Optional parameters
     * @param {String} opts.mode  (default to 'last')
     * @param {String} opts.metric  (default to 'energy')
     * @param {Number} opts.durationDays 
     * @param {String} opts.unit  (default to 'watt-hours')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getCiBadgeGet(repo, branch, workflow, opts) {
      return this.getCiBadgeGetWithHttpInfo(repo, branch, workflow, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Ci Badge Get
     * @param {String} repo 
     * @param {String} branch 
     * @param {String} workflow 
     * @param {Object} opts Optional parameters
     * @param {String} [mode = 'last')] 
     * @param {String} [metric = 'energy')] 
     * @param {Number} [durationDays] 
     * @param {String} [unit = 'watt-hours')] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getCiBadgeGet_0WithHttpInfo(repo, branch, workflow, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getCiBadgeGet_0");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling getCiBadgeGet_0");
      }
      // verify the required parameter 'workflow' is set
      if (workflow === undefined || workflow === null) {
        throw new Error("Missing the required parameter 'workflow' when calling getCiBadgeGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'branch': branch,
        'workflow': workflow,
        'mode': opts['mode'],
        'metric': opts['metric'],
        'duration_days': opts['durationDays'],
        'unit': opts['unit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/ci/badge/get', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Ci Badge Get
     * @param {String} repo 
     * @param {String} branch 
     * @param {String} workflow 
     * @param {Object} opts Optional parameters
     * @param {String} opts.mode  (default to 'last')
     * @param {String} opts.metric  (default to 'energy')
     * @param {Number} opts.durationDays 
     * @param {String} opts.unit  (default to 'watt-hours')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getCiBadgeGet_0(repo, branch, workflow, opts) {
      return this.getCiBadgeGet_0WithHttpInfo(repo, branch, workflow, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Ci Measurements
     * @param {String} repo 
     * @param {String} branch 
     * @param {String} workflow 
     * @param {Date} startDate 
     * @param {Date} endDate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getCiMeasurementsWithHttpInfo(repo, branch, workflow, startDate, endDate) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getCiMeasurements");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling getCiMeasurements");
      }
      // verify the required parameter 'workflow' is set
      if (workflow === undefined || workflow === null) {
        throw new Error("Missing the required parameter 'workflow' when calling getCiMeasurements");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getCiMeasurements");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getCiMeasurements");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'branch': branch,
        'workflow': workflow,
        'start_date': startDate,
        'end_date': endDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/ci/measurements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Ci Measurements
     * @param {String} repo 
     * @param {String} branch 
     * @param {String} workflow 
     * @param {Date} startDate 
     * @param {Date} endDate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getCiMeasurements(repo, branch, workflow, startDate, endDate) {
      return this.getCiMeasurementsWithHttpInfo(repo, branch, workflow, startDate, endDate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Ci Repositories
     * @param {Object} opts Optional parameters
     * @param {String} [repo] 
     * @param {String} [sortBy = 'name')] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getCiRepositoriesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'repo': opts['repo'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/ci/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Ci Repositories
     * @param {Object} opts Optional parameters
     * @param {String} opts.repo 
     * @param {String} opts.sortBy  (default to 'name')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getCiRepositories(opts) {
      return this.getCiRepositoriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Ci Runs
     * @param {String} repo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getCiRunsWithHttpInfo(repo) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getCiRuns");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/ci/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Ci Runs
     * @param {String} repo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getCiRuns(repo) {
      return this.getCiRunsWithHttpInfo(repo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Ci Stats
     * @param {String} repo 
     * @param {String} branch 
     * @param {String} workflow 
     * @param {Date} startDate 
     * @param {Date} endDate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getCiStatsWithHttpInfo(repo, branch, workflow, startDate, endDate) {
      let postBody = null;
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getCiStats");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling getCiStats");
      }
      // verify the required parameter 'workflow' is set
      if (workflow === undefined || workflow === null) {
        throw new Error("Missing the required parameter 'workflow' when calling getCiStats");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getCiStats");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getCiStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'repo': repo,
        'branch': branch,
        'workflow': workflow,
        'start_date': startDate,
        'end_date': endDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/ci/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Ci Stats
     * @param {String} repo 
     * @param {String} branch 
     * @param {String} workflow 
     * @param {Date} startDate 
     * @param {Date} endDate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getCiStats(repo, branch, workflow, startDate, endDate) {
      return this.getCiStatsWithHttpInfo(repo, branch, workflow, startDate, endDate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Insights
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getInsightsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/insights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Insights
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getInsights() {
      return this.getInsightsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Insights
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getInsights_0WithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/ci/insights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Insights
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getInsights_0() {
      return this.getInsights_0WithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Jobs
     * @param {Object} opts Optional parameters
     * @param {Number} [machineId] 
     * @param {String} [state] 
     * @param {Number} [jobId] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getJobsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'machine_id': opts['machineId'],
        'state': opts['state'],
        'job_id': opts['jobId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Jobs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.machineId 
     * @param {String} opts.state 
     * @param {Number} opts.jobId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getJobs(opts) {
      return this.getJobsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Machines
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getMachinesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/machines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Machines
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getMachines() {
      return this.getMachinesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Measurements Single
     * @param {String} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getMeasurementsSingleWithHttpInfo(runId) {
      let postBody = null;
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getMeasurementsSingle");
      }

      let pathParams = {
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/measurements/single/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Measurements Single
     * @param {String} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getMeasurementsSingle(runId) {
      return this.getMeasurementsSingleWithHttpInfo(runId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Network
     * @param {Object} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getNetworkWithHttpInfo(runId) {
      let postBody = null;
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getNetwork");
      }

      let pathParams = {
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/network/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Network
     * @param {Object} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getNetwork(runId) {
      return this.getNetworkWithHttpInfo(runId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Notes
     * @param {Object} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getNotesWithHttpInfo(runId) {
      let postBody = null;
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getNotes");
      }

      let pathParams = {
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/notes/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Notes
     * @param {Object} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getNotes(runId) {
      return this.getNotesWithHttpInfo(runId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Optimizations
     * @param {String} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getOptimizationsWithHttpInfo(runId) {
      let postBody = null;
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getOptimizations");
      }

      let pathParams = {
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/optimizations/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Optimizations
     * @param {String} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getOptimizations(runId) {
      return this.getOptimizationsWithHttpInfo(runId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Phase Stats Single
     * @param {String} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getPhaseStatsSingleWithHttpInfo(runId) {
      let postBody = null;
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getPhaseStatsSingle");
      }

      let pathParams = {
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/phase_stats/single/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Phase Stats Single
     * @param {String} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getPhaseStatsSingle(runId) {
      return this.getPhaseStatsSingleWithHttpInfo(runId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Repositories
     * @param {Object} opts Optional parameters
     * @param {String} [uri] 
     * @param {String} [branch] 
     * @param {Number} [machineId] 
     * @param {String} [machine] 
     * @param {String} [filename] 
     * @param {String} [sortBy = 'name')] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getRepositoriesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'uri': opts['uri'],
        'branch': opts['branch'],
        'machine_id': opts['machineId'],
        'machine': opts['machine'],
        'filename': opts['filename'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Repositories
     * @param {Object} opts Optional parameters
     * @param {String} opts.uri 
     * @param {String} opts.branch 
     * @param {Number} opts.machineId 
     * @param {String} opts.machine 
     * @param {String} opts.filename 
     * @param {String} opts.sortBy  (default to 'name')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getRepositories(opts) {
      return this.getRepositoriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Run
     * @param {String} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getRunWithHttpInfo(runId) {
      let postBody = null;
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getRun");
      }

      let pathParams = {
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/run/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Run
     * @param {String} runId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getRun(runId) {
      return this.getRunWithHttpInfo(runId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Runs
     * @param {Object} opts Optional parameters
     * @param {String} [uri] 
     * @param {String} [branch] 
     * @param {Number} [machineId] 
     * @param {String} [machine] 
     * @param {String} [filename] 
     * @param {Number} [jobId] 
     * @param {Boolean} [failed] 
     * @param {Number} [limit] 
     * @param {Object} [uriMode] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getRunsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'uri': opts['uri'],
        'branch': opts['branch'],
        'machine_id': opts['machineId'],
        'machine': opts['machine'],
        'filename': opts['filename'],
        'job_id': opts['jobId'],
        'failed': opts['failed'],
        'limit': opts['limit'],
        'uri_mode': opts['uriMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Runs
     * @param {Object} opts Optional parameters
     * @param {String} opts.uri 
     * @param {String} opts.branch 
     * @param {Number} opts.machineId 
     * @param {String} opts.machine 
     * @param {String} opts.filename 
     * @param {Number} opts.jobId 
     * @param {Boolean} opts.failed 
     * @param {Number} opts.limit 
     * @param {Object} opts.uriMode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getRuns(opts) {
      return this.getRunsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Timeline Badge
     * @param {String} metric 
     * @param {String} uri 
     * @param {Object} opts Optional parameters
     * @param {String} [detailName] 
     * @param {Number} [machineId] 
     * @param {String} [branch] 
     * @param {String} [filename] 
     * @param {String} [unit = 'watt-hours')] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getTimelineBadgeWithHttpInfo(metric, uri, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'metric' is set
      if (metric === undefined || metric === null) {
        throw new Error("Missing the required parameter 'metric' when calling getTimelineBadge");
      }
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling getTimelineBadge");
      }

      let pathParams = {
      };
      let queryParams = {
        'metric': metric,
        'uri': uri,
        'detail_name': opts['detailName'],
        'machine_id': opts['machineId'],
        'branch': opts['branch'],
        'filename': opts['filename'],
        'unit': opts['unit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/badge/timeline', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Timeline Badge
     * @param {String} metric 
     * @param {String} uri 
     * @param {Object} opts Optional parameters
     * @param {String} opts.detailName 
     * @param {Number} opts.machineId 
     * @param {String} opts.branch 
     * @param {String} opts.filename 
     * @param {String} opts.unit  (default to 'watt-hours')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getTimelineBadge(metric, uri, opts) {
      return this.getTimelineBadgeWithHttpInfo(metric, uri, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Timeline Stats
     * @param {String} uri 
     * @param {Number} machineId 
     * @param {Object} opts Optional parameters
     * @param {String} [branch] 
     * @param {String} [filename] 
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {String} [metric] 
     * @param {String} [phase] 
     * @param {String} [sorting] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getTimelineStatsWithHttpInfo(uri, machineId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling getTimelineStats");
      }
      // verify the required parameter 'machineId' is set
      if (machineId === undefined || machineId === null) {
        throw new Error("Missing the required parameter 'machineId' when calling getTimelineStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'uri': uri,
        'machine_id': machineId,
        'branch': opts['branch'],
        'filename': opts['filename'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'metric': opts['metric'],
        'phase': opts['phase'],
        'sorting': opts['sorting']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/timeline', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Timeline Stats
     * @param {String} uri 
     * @param {Number} machineId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.branch 
     * @param {String} opts.filename 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.metric 
     * @param {String} opts.phase 
     * @param {String} opts.sorting 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getTimelineStats(uri, machineId, opts) {
      return this.getTimelineStatsWithHttpInfo(uri, machineId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get User Settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getUserSettingsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/user/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get User Settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getUserSettings() {
      return this.getUserSettingsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Watchlist
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getWatchlistWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/watchlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Watchlist
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getWatchlist() {
      return this.getWatchlistWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Home
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    homeWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Home
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    home() {
      return this.homeWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Old V1 Jobs Endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    oldV1JobsEndpointWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Old V1 Jobs Endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    oldV1JobsEndpoint() {
      return this.oldV1JobsEndpointWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Old V1 Run Endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    oldV1RunEndpointWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/run/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Old V1 Run Endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    oldV1RunEndpoint() {
      return this.oldV1RunEndpointWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Old V1 Runs Endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    oldV1RunsEndpointWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Old V1 Runs Endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    oldV1RunsEndpoint() {
      return this.oldV1RunsEndpointWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post Ci Measurement Add
     * @param {module:model/CIMeasurement} cIMeasurement 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    postCiMeasurementAddWithHttpInfo(cIMeasurement) {
      let postBody = cIMeasurement;
      // verify the required parameter 'cIMeasurement' is set
      if (cIMeasurement === undefined || cIMeasurement === null) {
        throw new Error("Missing the required parameter 'cIMeasurement' when calling postCiMeasurementAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/ci/measurement/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post Ci Measurement Add
     * @param {module:model/CIMeasurement} cIMeasurement 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    postCiMeasurementAdd(cIMeasurement) {
      return this.postCiMeasurementAddWithHttpInfo(cIMeasurement)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post Ci Measurement Add Deprecated
     * @param {module:model/CIMeasurementOld} cIMeasurementOld 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    postCiMeasurementAddDeprecatedWithHttpInfo(cIMeasurementOld) {
      let postBody = cIMeasurementOld;
      // verify the required parameter 'cIMeasurementOld' is set
      if (cIMeasurementOld === undefined || cIMeasurementOld === null) {
        throw new Error("Missing the required parameter 'cIMeasurementOld' when calling postCiMeasurementAddDeprecated");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/ci/measurement/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post Ci Measurement Add Deprecated
     * @param {module:model/CIMeasurementOld} cIMeasurementOld 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    postCiMeasurementAddDeprecated(cIMeasurementOld) {
      return this.postCiMeasurementAddDeprecatedWithHttpInfo(cIMeasurementOld)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Robots Txt
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    robotsTxtWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/robots.txt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Robots Txt
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    robotsTxt() {
      return this.robotsTxtWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Software Add
     * @param {module:model/Software} software 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    softwareAddWithHttpInfo(software) {
      let postBody = software;
      // verify the required parameter 'software' is set
      if (software === undefined || software === null) {
        throw new Error("Missing the required parameter 'software' when calling softwareAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/software/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Software Add
     * @param {module:model/Software} software 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    softwareAdd(software) {
      return this.softwareAddWithHttpInfo(software)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Job
     * @param {module:model/JobChange} jobChange 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateJobWithHttpInfo(jobChange) {
      let postBody = jobChange;
      // verify the required parameter 'jobChange' is set
      if (jobChange === undefined || jobChange === null) {
        throw new Error("Missing the required parameter 'jobChange' when calling updateJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/job', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Job
     * @param {module:model/JobChange} jobChange 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateJob(jobChange) {
      return this.updateJobWithHttpInfo(jobChange)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update User Setting
     * @param {module:model/UserSetting} userSetting 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateUserSettingWithHttpInfo(userSetting) {
      let postBody = userSetting;
      // verify the required parameter 'userSetting' is set
      if (userSetting === undefined || userSetting === null) {
        throw new Error("Missing the required parameter 'userSetting' when calling updateUserSetting");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/user/setting', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update User Setting
     * @param {module:model/UserSetting} userSetting 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateUserSetting(userSetting) {
      return this.updateUserSettingWithHttpInfo(userSetting)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
