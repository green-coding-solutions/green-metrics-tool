name: 'GMT Pytest'
description:  'Run Pytest with setup and teardown'
inputs:
  metrics-to-turn-off:
    description: 'a list of metrics to turn off that is passed to the disable metrics script'
    required: false
    default: ''
  gmt-directory:
    description: 'The root directory of the gmt repository'
    required: false
    default: '.'
  tests-directory:
    description: 'The directory where to run the tests from'
    required: false
    default: './test'
  tests-command:
    description: 'The command to run the tests'
    required: false
    default: 'pytest'
runs:
  using: 'composite'
  steps:
    - name: Install python dependencies
      shell: bash
      working-directory: ${{ inputs.gmt-directory }}
      uses: actions/checkout@v3
      uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip' # caching pip dependencies
      run: |
        python -m pip install --upgrade pip --user setuptools==58.3.0
        pip install -r requirements.txt -r requirements-dev.txt
        pip install -r metric_providers/psu/energy/ac/xgboost/system/model/requirements.txt
    
    - name: Run Prereqs and Install Script
      shell: bash
      working-directory: ${{ inputs.gmt-directory }}
      run: |
        ./install_linux.sh -p testpw -a http://api.green-coding.example:9142 -m http://metrics.green-coding.example:9142

    - name: Turn off metric providers which do not work in github vm
      shell: bash
      working-directory: ${{ inputs.gmt-directory }}
      run: |
        ./disable-metric-providers.sh ${{ inputs.metrics-to-turn-off }}

    - name: Setup Test environment
      shell: bash
      working-directory: ${{ inputs.gmt-directory }}/test
      run: |
        python3 setup-test-env.py
        
    ## use hashFiles instead of this hack
    ## need the check dockerfiles-gunicorn
    ## think about which file changes would require a docker re-image
       ## should just be the dockerfile-gunicorn but think about it
     ## is there a way to check if a docker image is "stale"
       ## aka, in compose.yml there is image:nginx - this means its nginx:latest
       # can we check that the 'latest' we have cached is still up to date with actual latest
       # SOlution: after 'restoring' the cached images, do a docker compose build
       ## if they are stale ,will get new images, if not stale, will not rebuild
    - name: Hash docker compose file
      id: hash-requirements
      shell: bash
      run: echo "myhash=$(md5sum ${{ $GITHUB_WORKSPACE }}/${{ inputs.gmt-directory }}/docker/test-compose.yml | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

    - name: docker container cache
      shell: bash
      id: cache-containers
      uses: actions/cache@v3
      env:
        cache-name: cache-docker-containers
      with:
        path: /var/lib/docker/overlay2
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ steps.hash-requirements.outputs.myhash }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ steps.hash-requirements.outputs.myhash }}


    - name: Start Test container
      shell: bash
      working-directory: ${{ inputs.gmt-directory }}/test
      run: |
        ./start-test-containers.sh -d
   
    - name: Sleep for 10 seconds
      run: sleep 10s
      shell: bash
        
    - name: Run Tests
      shell: bash
      working-directory: ${{ inputs.tests-directory }}
      run: |
        ${{ inputs.tests-command }} -rA | tee /tmp/test-results.txt

    - name: Display Results
      shell: bash
      if: always()
      working-directory: ${{ inputs.tests-directory }}
      run: |
        cat /tmp/test-results.txt | grep -oPz '(=*) short test summary(.*\n)*' >> $GITHUB_STEP_SUMMARY

    - name: Stop Containers
      shell: bash
      if: always()
      working-directory: ${{ inputs.gmt-directory }}/test
      run: |
        ./stop-test-containers.sh
