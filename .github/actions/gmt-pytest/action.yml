name: 'GMT Pytest'
description:  'Run Pytest with setup and teardown'
inputs:
  metrics-to-turn-off:
    description: 'a list of metrics to turn off that is passed to the disable metrics script'
    required: false
    default: ''
  gmt-directory:
    description: 'The root directory of the gmt repository'
    required: false
    default: '.'
  tests-command:
    description: 'The command to run the tests'
    required: false
    default: 'pytest -vv'
  github-token:
    description: 'pass in your secrets.GITHUB_TOKEN'
    required: true
  ee:
    description: 'enable enterprise tests'
    required: false
    default: false

runs:
  using: 'composite'
  steps:
    - name: setup_python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - id: python_cache
      uses: actions/cache@v4
      with:
        path: venv
        key: pip-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-dev.txt') }}-${{ hashFiles('docker/requirements.txt') }}-${{ hashFiles('metric_providers/psu/energy/ac/xgboost/machine/model/requirements.txt') }}

    - name: install script and packages
      shell: bash
      working-directory: ${{ inputs.gmt-directory }}
      run: |
        if ${{inputs.ee}}; then
          ./install_linux.sh -p testpw -a http://api.green-coding.internal:9142 -m http://metrics.green-coding.internal:9142 -b -t -l -z -e github-actions-test
        else
          ./install_linux.sh -p testpw -a http://api.green-coding.internal:9142 -m http://metrics.green-coding.internal:9142 -b -t -l -z
        fi
        source venv/bin/activate
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Install dev requirements and run test setup script
      shell: bash
      working-directory: ${{ inputs.gmt-directory }}
      run: |
        source venv/bin/activate
        python3 -m pip install -r requirements-dev.txt
        playwright install --with-deps firefox
        if ${{inputs.ee}}; then
          cd tests && python3 setup-test-env.py --no-docker-build --ee
        else
          cd tests && python3 setup-test-env.py --no-docker-build
        fi

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Build docker-compose
      id: build-docker-compose
      shell: bash
      working-directory: ${{ inputs.gmt-directory }}/docker
      run: |
        { DOCKER_OUTPUT=$(docker buildx bake --file test-compose.yml --file docker-compose-cache.json 2>&1); DOCKER_EXIT_CODE=$?; } || true
        if [ "$DOCKER_EXIT_CODE" -ne 0 ]; then
          echo "Docker build failed with exit code $DOCKER_EXIT_CODE"
          echo "buildx output:"
          echo $DOCKER_OUTPUT
          if echo "$DOCKER_OUTPUT" | grep -q "403 Forbidden"; then
            echo "Docker build failed due to permissions issue. Continuing..."
          else
              exit 1
          fi
        fi

    - name: Start Test container
      shell: bash
      working-directory: ${{ inputs.gmt-directory }}/tests
      run: |
        source ../venv/bin/activate && ./start-test-containers.sh -d

    # - name: Setup upterm session
    #   uses: lhotari/action-upterm@v1

    - name: Disable swap
      shell: bash
      run: |
        sudo swapoff -a

    - name: Run Tests
      shell: bash
      working-directory: ${{ inputs.gmt-directory }}/tests
      run: |
        source ../venv/bin/activate
        python3 -m ${{ inputs.tests-command }} -rA | tee /tmp/test-results.txt

    - name: Display Results
      shell: bash
      if: always()
      run: |
        cat /tmp/test-results.txt | grep -oPz '(=*) short test summary(.*\n)*' >> $GITHUB_STEP_SUMMARY

    - name: Stop Containers
      shell: bash
      if: always()
      working-directory: ${{ inputs.gmt-directory }}/tests
      run: |
        ./stop-test-containers.sh
